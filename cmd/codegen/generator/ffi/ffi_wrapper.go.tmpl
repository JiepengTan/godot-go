/*------------------------------------------------------------------------------
//   This code was generated by template ffi_wrapper.go.tmpl.
//
//   Changes to this file may cause incorrect behavior and will be lost if
//   the code is regenerated. Any updates should be done in
//   "ffi_wrapper.go.tmpl" so they can be included in the generated
//   code.
//----------------------------------------------------------------------------*/
{{ $view := . -}}

package ffi

//revive:disable

// #include <gdextension_interface.h>
// #include "ffi_wrapper.gen.h"
// #include <stdint.h>
// #include <stdio.h>
// #include <stdlib.h>
import "C"
import (
	"unsafe"
)

// C type aliases
type Uint64T C.uint64_t
type Uint32T C.uint32_t
type Uint16T C.uint16_t
type Uint8T C.uint8_t
type Int32T C.int32_t
type Int16T C.int16_t
type Int8T C.int8_t
type Char C.char
type WcharT C.wchar_t
{{ range $i, $t := $view.CollectAliases -}}
	type {{ camelCase $t.Name }} C.{{ $t.Name }}
{{ end -}}

// enums
{{ range $i, $e := $view.CollectEnums -}}
type {{ $e.Name }} C.{{ $e.Name }}
const (
	{{ range $j, $v := $e.Values -}}
	{{ $v.Name }} {{ if eq $j 0 }}{{ $e.Name }}{{ end }} {{ with $z := (goEnumValue $v $j) -}} = {{ $z }} {{- end }}
	{{ end -}}
)
{{ end }}

// C function aliases
{{ range $i, $f := $view.CollectFunctions -}}
type {{ $f.Name }} C.{{ $f.Name }}
{{ end }}

// structs
{{ range $i, $t := $view.CollectStructs -}}
	type {{ $t.Name }} C.{{ $t.Name }}
{{ end -}}



{{ genFFIWrapperGo $view }}